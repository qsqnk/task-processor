/*
 * This file is generated by jOOQ.
 */
package domain.db.tables;


import domain.db.Indexes;
import domain.db.Keys;
import domain.db.Public;
import domain.db.tables.records.TasksPropertiesRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TasksProperties extends TableImpl<TasksPropertiesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.tasks_properties</code>
     */
    public static final TasksProperties TASKS_PROPERTIES = new TasksProperties();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TasksPropertiesRecord> getRecordType() {
        return TasksPropertiesRecord.class;
    }

    /**
     * The column <code>public.tasks_properties.id</code>.
     */
    public final TableField<TasksPropertiesRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.tasks_properties.task_id</code>.
     */
    public final TableField<TasksPropertiesRecord, Long> TASK_ID = createField(DSL.name("task_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.tasks_properties.field_name</code>.
     */
    public final TableField<TasksPropertiesRecord, String> FIELD_NAME = createField(DSL.name("field_name"), SQLDataType.VARCHAR(256).nullable(false), this, "");

    /**
     * The column <code>public.tasks_properties.value</code>.
     */
    public final TableField<TasksPropertiesRecord, JSONB> VALUE = createField(DSL.name("value"), SQLDataType.JSONB.nullable(false), this, "");

    private TasksProperties(Name alias, Table<TasksPropertiesRecord> aliased) {
        this(alias, aliased, null);
    }

    private TasksProperties(Name alias, Table<TasksPropertiesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.tasks_properties</code> table reference
     */
    public TasksProperties(String alias) {
        this(DSL.name(alias), TASKS_PROPERTIES);
    }

    /**
     * Create an aliased <code>public.tasks_properties</code> table reference
     */
    public TasksProperties(Name alias) {
        this(alias, TASKS_PROPERTIES);
    }

    /**
     * Create a <code>public.tasks_properties</code> table reference
     */
    public TasksProperties() {
        this(DSL.name("tasks_properties"), null);
    }

    public <O extends Record> TasksProperties(Table<O> child, ForeignKey<O, TasksPropertiesRecord> key) {
        super(child, key, TASKS_PROPERTIES);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.IDX__TASKS_PROPERTIES__TASK_ID__FIELD_NAME);
    }

    @Override
    public Identity<TasksPropertiesRecord, Long> getIdentity() {
        return (Identity<TasksPropertiesRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<TasksPropertiesRecord> getPrimaryKey() {
        return Keys.TASKS_PROPERTIES_PKEY;
    }

    @Override
    public List<UniqueKey<TasksPropertiesRecord>> getKeys() {
        return Arrays.<UniqueKey<TasksPropertiesRecord>>asList(Keys.TASKS_PROPERTIES_PKEY);
    }

    @Override
    public List<ForeignKey<TasksPropertiesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TasksPropertiesRecord, ?>>asList(Keys.TASKS_PROPERTIES__FK__TASKS_PROPERTIES__TASK_ID);
    }

    private transient Tasks _tasks;

    public Tasks tasks() {
        if (_tasks == null)
            _tasks = new Tasks(this, Keys.TASKS_PROPERTIES__FK__TASKS_PROPERTIES__TASK_ID);

        return _tasks;
    }

    @Override
    public TasksProperties as(String alias) {
        return new TasksProperties(DSL.name(alias), this);
    }

    @Override
    public TasksProperties as(Name alias) {
        return new TasksProperties(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TasksProperties rename(String name) {
        return new TasksProperties(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TasksProperties rename(Name name) {
        return new TasksProperties(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, Long, String, JSONB> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
