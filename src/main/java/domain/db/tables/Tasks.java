/*
 * This file is generated by jOOQ.
 */
package domain.db.tables;


import domain.db.Indexes;
import domain.db.Keys;
import domain.db.Public;
import domain.db.enums.Taskstatusenum;
import domain.db.tables.records.TasksRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Tasks extends TableImpl<TasksRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.tasks</code>
     */
    public static final Tasks TASKS = new Tasks();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TasksRecord> getRecordType() {
        return TasksRecord.class;
    }

    /**
     * The column <code>public.tasks.id</code>.
     */
    public final TableField<TasksRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.tasks.name</code>.
     */
    public final TableField<TasksRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(256).nullable(false), this, "");

    /**
     * The column <code>public.tasks.status</code>.
     */
    public final TableField<TasksRecord, Taskstatusenum> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(domain.db.enums.Taskstatusenum.class), this, "");

    /**
     * The column <code>public.tasks.scheduled_ts</code>.
     */
    public final TableField<TasksRecord, LocalDateTime> SCHEDULED_TS = createField(DSL.name("scheduled_ts"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("(now() AT TIME ZONE 'UTC'::text)", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.tasks.created_ts</code>.
     */
    public final TableField<TasksRecord, LocalDateTime> CREATED_TS = createField(DSL.name("created_ts"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("(now() AT TIME ZONE 'UTC'::text)", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.tasks.updated_ts</code>.
     */
    public final TableField<TasksRecord, LocalDateTime> UPDATED_TS = createField(DSL.name("updated_ts"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("(now() AT TIME ZONE 'UTC'::text)", SQLDataType.LOCALDATETIME)), this, "");

    private Tasks(Name alias, Table<TasksRecord> aliased) {
        this(alias, aliased, null);
    }

    private Tasks(Name alias, Table<TasksRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.tasks</code> table reference
     */
    public Tasks(String alias) {
        this(DSL.name(alias), TASKS);
    }

    /**
     * Create an aliased <code>public.tasks</code> table reference
     */
    public Tasks(Name alias) {
        this(alias, TASKS);
    }

    /**
     * Create a <code>public.tasks</code> table reference
     */
    public Tasks() {
        this(DSL.name("tasks"), null);
    }

    public <O extends Record> Tasks(Table<O> child, ForeignKey<O, TasksRecord> key) {
        super(child, key, TASKS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.IDX__TASKS__STATUS__SCHEDULED_TS);
    }

    @Override
    public Identity<TasksRecord, Long> getIdentity() {
        return (Identity<TasksRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<TasksRecord> getPrimaryKey() {
        return Keys.TASKS_PKEY;
    }

    @Override
    public List<UniqueKey<TasksRecord>> getKeys() {
        return Arrays.<UniqueKey<TasksRecord>>asList(Keys.TASKS_PKEY);
    }

    @Override
    public Tasks as(String alias) {
        return new Tasks(DSL.name(alias), this);
    }

    @Override
    public Tasks as(Name alias) {
        return new Tasks(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Tasks rename(String name) {
        return new Tasks(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Tasks rename(Name name) {
        return new Tasks(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, String, Taskstatusenum, LocalDateTime, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
